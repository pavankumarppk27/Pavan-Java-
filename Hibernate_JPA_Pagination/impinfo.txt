To perform pagination and/or sorting, we must create org.springframework.data.domain.Pageable or 
org.springframework.data.domain.Sort instances are pass to the findAll() method.


 Pageable paging = PageRequest.of(pageNo, pageSize, Sort.by(sortBy));
 
 Page<EmployeeEntity> pagedResult = repository.findAll(paging);
         

To apply only pagination in result set, we shall create Pageable object without any Sort information.
Pageable paging = PageRequest.of(pageNo, pageSize);

To apply only pagination in result set, we shall create Pageable object with desired Sort column name.

Pageable paging = PageRequest.of(pageNo, pageSize, Sort.by("email"));
 
Page<EmployeeEntity> pagedResult = repository.findAll(paging);
By default, records are ordered in DESCENDING order. To choose ASCENDING order, use .ascending() method.

Pageable paging = PageRequest.of(pageNo, pageSize, Sort.by("email").ascending()); 
 
Page<EmployeeEntity> pagedResult = repository.findAll(paging); 
4.3. Sorting only
If there is no need to page, and only sorting is required, we can create Sort object for that.

Sort sortOrder = Sort.by("email"); 
 
List<EmployeeEntity> list = repository.findAll(sortOrder);
If we wish to apply sorting on multiple columns or group by sort, then that is also possible by creating Sort using simple builder pattern steps.

Sort emailSort = Sort.by("email"); 
Sort firstNameSort = Sort.by("first_name"); 
 
Sort groupBySort = emailSort.and(firstNameSort);
 
List<EmployeeEntity> list = repository.findAll(groupBySort);


